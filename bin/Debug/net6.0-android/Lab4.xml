<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lab4</name>
    </assembly>
    <members>
        <member name="T:Lab4.BusinessLogic">
            <summary>
            Handles the BusinessLogic
            </summary>
        </member>
        <member name="M:Lab4.BusinessLogic.GetEntries">
            <summary>
            Returns the entries that have all the entries in the DB populated in it
            </summary>
            <returns>ObservableCollection of entries</returns>
        </member>
        <member name="M:Lab4.BusinessLogic.FindEntry(System.Int32)">
            <summary>
            Finds specific entry in the entries
            </summary>
            <returns>the entry (if it exists, null otherwise)</returns>
        </member>
        <member name="M:Lab4.BusinessLogic.CheckEntryFields(System.String,System.String,System.Int32,System.String)">
            <summary>
            Verifies that all the entry fields are valid
            </summary>
            <param name="clue">clue to be checked</param>
            <param name="answer">answer to be checked</param>
            <param name="difficulty">difficulty to be checked</param>
            <param name="date">date to be checked</param>
            <returns>corresponding error in InvalidFieldError, InvalidFieldError.NoError otherwise</returns>
        </member>
        <member name="M:Lab4.BusinessLogic.AddEntry(System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds an entry
            </summary>
            <param name="clue">clue of new entry</param>
            <param name="answer">answer of new entry</param>
            <param name="difficulty">difficulty of new entry</param>
            <param name="date">date of new entry</param>
            <returns>corresponding error in InvalidFieldError, InvalidFieldError.NoError otherwise</returns>
        </member>
        <member name="M:Lab4.BusinessLogic.DeleteEntry(System.Int32)">
            <summary>
            Deletes an entry
            </summary>
            <param name="entryId">id of entry to be deleted</param>
            <returns>corresponding error if there is one, EntryDeletionError.NoError otherwise</returns>
        </member>
        <member name="M:Lab4.BusinessLogic.EditEntry(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Edits an Entry
            </summary>
            <param name="clue">new clue for existing entry</param>
            <param name="answer">new answer for existing entry</param>
            <param name="difficulty">new difficulty for existing entry</param>
            <param name="date">new date for existing entry</param>
            <param name="id">id for existing entry</param>
            <returns>an error if there is one, EntryEditError.NoError otherwise</returns>
        </member>
        <member name="M:Lab4.BusinessLogic.GetNextId">
            <summary>
            Ran only once at program start up, it retrieves the next available id by
            finding the max id within the database and sets latestId to that number
            </summary>
        </member>
        <member name="M:Lab4.BusinessLogic.SortByClue">
            <summary>
            Sorts the entries by clue
            </summary>
        </member>
        <member name="M:Lab4.BusinessLogic.SortByAnswer">
            <summary>
            Sorts the entries by answer
            </summary>
        </member>
        <member name="M:Lab4.BusinessLogic.ChangeDatabase">
            <summary>
            Added for testing purposes
            Changes the db that we are working with
            so that we don't work with the actual database when testing
            </summary>
        </member>
        <member name="T:Lab4.IBusinessLogic">
            <summary>
            The interface for BusinessLogic
            </summary>
        </member>
        <member name="T:Lab4.MauiProgram">
                    Name: Paul Hwang
                    Date: October 18th, 2022
                    Description: Lab 3 - Building upon our Lab 2 and having the database be an actual running database
            					         on bit.io. I use an API key to write and fetch data to/from the database.
                    Bugs: 
                    Reflection: 
        </member>
        <member name="M:Lab4.RelationalDatabase.#ctor">
            <summary>
            Creates connection string to be used to connect to bit.io db
            </summary>
        </member>
        <member name="M:Lab4.RelationalDatabase.InitializeConnectionString">
            <summary>
            Creates the connection string to be utilized throughout the program
            </summary>
        </member>
        <member name="M:Lab4.RelationalDatabase.AddEntry(Lab4.Entry)">
            <summary>
            Adds an entry to the database
            </summary>
            <param name="entry">the entry to add</param>
        </member>
        <member name="M:Lab4.RelationalDatabase.FindEntry(System.Int32)">
            <summary>
            Finds a specific entry
            </summary>
            <param name="id">id of entry to find</param>
            <returns>the Entry (if available, null otherwise)</returns>
        </member>
        <member name="M:Lab4.RelationalDatabase.DeleteEntry(Lab4.Entry)">
            <summary>
            Deletes an entry
            </summary>
            <param name="entry">An entry, which is verified to exist</param>
            <returns>a bool that says if deletion was successful or not</returns>
        </member>
        <member name="M:Lab4.RelationalDatabase.EditEntry(Lab4.Entry)">
            <summary>
            Edits an entry
            </summary>
            <param name="modifiedEntry">Entry containing updated information but same id</param>
            <returns>true if editing was successful, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lab4.RelationalDatabase.GetEntries" -->
        <member name="M:Lab4.RelationalDatabase.SortByClue">
            <summary>
            Sorts the entries by the clue (ascending alphabetical)
            </summary>
        </member>
        <member name="M:Lab4.RelationalDatabase.SortByAnswer">
            <summary>
            Sorts the entries by the answer (ascending alphabetical)
            </summary>
        </member>
        <member name="M:Lab4.RelationalDatabase.PopulateEntries(System.String)">
             <summary>
             Populates entries in the proper ordering that it needs to be in
             </summary>
            <param name="ordering">string representing how entries should be ordered</param>
        </member>
        <member name="M:Lab4.RelationalDatabase.GetNextId">
            <summary>
            Ran only once at program start up, it retrieves the next available Id by
            finding the max id within the database and returns it
            </summary>
            <returns>the max id (int)</returns>
        </member>
    </members>
</doc>
